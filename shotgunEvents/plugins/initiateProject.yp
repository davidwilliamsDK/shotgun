# -*- coding: utf-8 -*-
"""
For detailed information please see

http://shotgunsoftware.github.com/shotgunEvents/api.html
"""
import logging
import pprint
import sg_utils
reload(sg_utils) 



### Setting up local shotgun hook
apiKey = '1d447d89131cdc8cbb3cc800ba673db322bfabf5'
scriptName = "eventTrigger_initiateProject"
url = "https://duckling.shotgunstudio.com"




def registerCallbacks(reg):
	"""Register all necessary or appropriate callbacks for this plugin."""


	# Specify who should recieve email notifications when they are sent out.
	#
	#reg.setEmails('me@mydomain.com')

	# Use a preconfigured logging.Logger object to report info to log file or
	# email. By default error and critical messages will be reported via email
	# and logged to file, all other levels are logged to file.
	#
	#reg.logger.debug('Loading logArgs plugin.')

	# Register a callback into the event processing system.
	#
	# Arguments:
	# - Shotgun script name
	# - Shotgun script key
	# - Callable
	# - Argument to pass through to the callable
	# - A filter to match events to so the callable is only invoked when
	#   appropriate
	#

	filter_projectCreation = {'Shotgun_Project_New': ['*']}
	reg.registerCallback( scriptName, apiKey, callback_projectCreation, filter_projectCreation, None)

	#filter_projectBudgetChange = {'Shotgun_Project_Change': ['sg_budget', 'sg_cost']}
	#reg.registerCallback( scriptName, apiKey, callback_projectBudgetChange, filter_projectBudgetChange, None)

	# Set the logging level for this particular plugin. Let error and above
	# messages through but block info and lower. This is particularly usefull
	# for enabling and disabling debugging on a per plugin basis.
	#reg.logger.setLevel(logging.ERROR)
	reg.logger.setLevel(logging.INFO)


	

#----------------------------------------------------------------------------------
# Creating Task on new Project, matching start and due date for Project overview
#----------------------------------------------------------------------------------
def callback_projectCreation(sg, logger, event, args):
    try:
        #logger.info("\nEvent:\n%s\n" % pprint.pformat(event))
        
        # Querying full project data to get start and end date
        fields = ['sg_start', 'sg_due']
        sgProj = sg_utils.sgGetEntityData(sg, event['entity'], fields = fields)
        
        print "Fetched project: "
        pprint.pprint(sgProj)
        print ""

        if not validate_sgObj(sgProj, fields):
            logger.error("sgProj doesn't contain requested field: " + f)

        projStart = sgProj["sg_start"]
        projDue = sgProj["sg_due"]
        sgTask = sg_utils.sgCreateTask(sg, sgProj, sgProj, projStart, projDue, "Summary")
        
        logger.info("Created pitch task: " + pprint.pformat(sgTask))


    except:
        ### Handle errors here
        #logger.error("\nCaught Event:\n%s\n" % pprint.pformat(event))
        raise
        
  






#----------------------------------------------------------------------------------
# Synching Project balance as an equation of [sg_budget - sg_cost]
#----------------------------------------------------------------------------------
def callback_projectBudgetChange(sg, logger, event, args):
    try:
        #logger.info("\nEvent:\n%s\n" % pprint.pformat(event))
                
        fields = ['sg_budget', 'sg_cost']
        sgProj = sg_utils.sgGetEntityData(sg, event['entity'], fields = fields)
        
        if not validate_sgObj(sgProj, fields):
            logger.error("Return value doesn't contain fields: " + `fields`)
            
        
        for f in fields:
            if sgProj[f] == None:
                logger.info("Either of " + `fields`+ " weren't set. Skipping balance update")
                return 0
            
        balance = sgProj["sg_budget"] - sgProj["sg_cost"]
        sgData = {"sg_balance" : balance}
        
        
        ### Writing what I'm doing
        logger.info("Setting project(" + `sgProj['id']` + ") balance to: " + `balance`)
        
        # Setting session for browser response
        sg_utils.sgSetSessionUUID(sg, logger, event )
            
        # Performing update
        sg_utils.sgUpdateEntity( sg, sgProj, sgData )
        

    except:
        ### Handle errors here
        #logger.error("\nCaught Event:\n%s\n" % pprint.pformat(event))
        raise
        






def validate_sgObj(sgObj, fields):
    for f in fields:
        if not sgObj.has_key(f):
            return 0
    return 1





	
"""	
def versionStatusUpdate(sg, logger, event, args):
    #logger.info("\nVersion Status Change:\n%s\n" % pprint.pformat(event))
            
    # Get Versions task
    if event['entity']:
        vTask = sg_utils.sgGetTasksByVersion(sg, event["entity"], ["sg_status_list", "content"] )
        
        if vTask:
            versions = sg_utils.sgGetVersionsByTask(sg, vTask, ["sg_status_list"] )
        else:
            logger.info("vTask is Nonetype. Skipping")
            return 0
    else:
        logger.info("event['entity'] is Nonetype. skipping")
        return 0

    
    taskStatus = 'ip' # If version exists Task should always be In Progress
    finCount = 0
    noteCount = 0
    
    for ver in versions:
            if ver["sg_status_list"] == "fin":
                    finCount += 1
            elif ver["sg_status_list"] == "nts":
                    noteCount += 1

    # If all Versions are finished set Task status to finished, otherwise In Progress.			
    if finCount and noteCount + finCount == len(versions):
            taskStatus = 'fin'
    else:
            taskStatus = 'ip'
    
    
    ### Updating status    
    if not vTask["sg_status_list"] == taskStatus:
            trigger = "\nTrigger:\n%s" % pprint.pformat(event['meta'])
            action = "\nChanging status on Task:%s(%i) from %s to %s" % (vTask['content'], vTask['id'], vTask['sg_status_list'], taskStatus)
            logger.info(trigger + action)
            sg_utils.sgSetTaskStatus(sg, vTask, taskStatus)
            
            










	
def taskStatusUpdate(sg, logger, event, args):
	#logger.info("\nTask Status Change:\n%s\n" % pprint.pformat(event))

	shot = sg_utils.sgGetShotByTask(sg, event["entity"], ["sg_status_list"])
	
	if not shot: 
		logger.info("shot didn't catch anything. Quitting")
		return
	
	shotTasks = sg_utils.sgGetTasksByShot(sg, shot, ["sg_status_list"])
	
	if not shotTasks:
		logger.info("shotTasks didn't catch anything. Quitting")
		return
	
	shotStatus = 'wtg'
	finCount = 0
	
	# If any task is not 'Waiting to start' set shot to 'In progress'
	for task in shotTasks:
		if not task["sg_status_list"] == "wtg":
			shotStatus = 'ip'
		
			if task["sg_status_list"] == "fin":
				finCount += 1
				
	# If all tasks are finished, set shot status to finished.
	if finCount == len(shotTasks):
		shotStatus = 'fin'
	elif finCount:
		shotStatus = 'ip'

	if not shot["sg_status_list"] == shotStatus:
		sg_utils.sgSetShotStatus(sg, shot, shotStatus)
		
	shotStatusUpdate(sg, shot)


def shotStatusUpdate(sg, shot):
	episode = sg_utils.sgGetEpisodeByShot(sg, shot)
	pprint.pprint(episode)
"""	
